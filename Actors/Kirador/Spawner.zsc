Class KiradorThingSpawner : Actor
{
	enum Flags
	{
		ARG_WAIT			= 1,
		ARG_NOSPACECHECK			= 2,
		ARG_STARTACTIVE		= 4,
		ARG_NORESET		= 8,
		ARG_ONCE			= 16,
		ARG_SPAWNFOG			= 32,
		ARG_TRANSFERTID			= 64,
		ARG_PROJSOUND			= 128
	}
	Default
	{
		//$Sprite TFOGC0
		
		//$Arg0 "Count"
		//$Arg0ToolTip "set an amount to spawn \nnegative values means infinite"
		
		//$Arg1 "Flags"
		//$Arg1Type 12
		//$Arg1Enum { 1 = "Wait for death/pickup"; 2 = "Don't check for space"; 4 = "Starts active"; 8 = "Dont reset timer"; 16 = "Activate Once"; 32 = "Spawn fog"; 64 = "Transfer TID"; 128="Play projectile sound"; }
		
		//$Arg2 "Delay (tics)"
		//$Arg2Default 1
		
		//$Arg3 "Spawned thing tag"
		
		//$Arg4 "Speed  (divided 10)"
		
		
		+NOBLOCKMAP
		+SYNCHRONIZED
		FloatbobPhase 0;
		ReactionTime 0;
		Radius 10;
		Scale 0.5;
	}
	string user_actorname;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(GetAge()) Return;
		special2=Args[0];
		if(!Args[2]) Args[2]=1;
		if(Args[1] & ARG_STARTACTIVE)
		Activate(Self);
	}
	Override Void Deactivate(Actor Activator)
	{
		Super.Deactivate(activator);
		bDormant=True;
	}
	Override Void Activate(Actor Activator)
	{
		if(bKilled && (Args[1] & ARG_ONCE) || special2==0 && Args[0]>0) Return;
		
		bDormant=False;
		
		if(special1 && (Args[1] & ARG_NORESET))  Return;
		special1=Abs(Args[2]);
	}
	Override Void Tick()
	{
		Super.Tick();
		if(isFrozen() || bDormant) Return;
		if((Args[1] & ARG_WAIT) && Target)
		{
			let inv=Inventory(Target);
			if(inv && (inv.owner || !inv.bSpecial) || target.Default.bMissile && !target.bMissile)
			target=null;
			else if(Target.Health>0) Return;
			target=null;
			Activate(self);
		}
		if(special1)
		{
			special1--;
			if(!special1)
			{
				bool spawned=SpawnThing();
				if(bJustHit) special1++;
			}
		}
	}
	bool SpawnThing()
	{
		bool spawned=false;
		Class<Actor> cls=user_actorname;
		if(!cls)
		{
			console.Printf("Unknown class "..user_actorname);
			Return false;
		}
		if(!(Args[1] & ARG_NOSPACECHECK))
		{
			A_SetSize(GetDefaultByType(cls).Radius,GetDefaultByType(cls).Height);
			A_ChangeLinkFlags(false);
			bSolid=GetDefaultByType(cls).bSolid;
			bCanPass=GetDefaultByType(cls).bCanPass;
			bool check=CheckMove(pos.xy+(0,0.1),PCM_DROPOFF);
			A_ChangeLinkFlags(true);
			if(!check) { bJustHit=True; /*A_Log("no space");*/ Return False; }
		}
		bJustHit=False; 
		//A_Log("Spawn: ".. user_actorname);
		target=Spawn(cls,pos,ALLOW_REPLACE);
		target.Angle=Angle;
		target.pitch=pitch;
		if(Args[3] || (Args[1] & ARG_TRANSFERTID) && TID)
		target.ChangeTid((Args[1] & ARG_TRANSFERTID)? TID:Abs(Args[3]));
		target.Health*=Health*1.0/Default.Health;
		target.bAmbush=bAmbush;
		if(target.bMissile || Args[4])
		{
			double speed=Args[4]? Args[4]*0.1:target.speed;
			target.Vel3DFromAngle(speed,angle,pitch);
			if((Args[1] & ARG_PROJSOUND) && target.bMissile)
			{
				actor emitter=target;
				if(target.bSpawnSoundSource) emitter=self;
				emitter.A_StartSound(target.seesound);
			}
		}
		
		if(Args[1] & ARG_SPAWNFOG)
		{
			class<Actor> fogType;
			
			if(TeleFogDestType) fogType=TeleFogDestType;
			else if(TeleFogSourceType) fogType=TeleFogSourceType;
			else fogType="TeleportFog");
			Spawn("TeleportFog",Pos,ALLOW_REPLACE);
		}
		
		bKilled=Args[1] & ARG_ONCE;
		If(special2>0) special2--;
		if((special2>0 || special2<0) && !(Args[1] & ARG_WAIT))
		{
			Activate(self);
		}
		Return true;
	}
}