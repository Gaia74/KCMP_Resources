Class KiradorThingWaiter : Actor
{
	Default
	{
		//$Sprite KR00P0
		//$NotAngled 
		+NOSECTOR
		+NOBLOCKMAP
		+NOINTERACTION
		+SYNCHRONIZED
		FloatbobPhase 0;
		ReactionTime 0;
		Radius 10;
		Scale 0.5;
	}
	int user_delay;
	int user_targettid;
	int user_waittics;
	int user_percenttrigger;
	bool user_percent_usehealth;
	bool user_activateonce;
	//bool user_startactive;
	bool user_livingthingsonly;
	int maxhp, maxcount;
	/*Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(GetAge()) Return;
		if(user_startactive)
		Activate(Self);
	}*/
	Override Void Deactivate(Actor activator)
	{
		super.deactivate(activator);
		bDormant=True;		
	}
	int CountThings()
	{
		
		ActorIterator it = Level.CreateActorIterator(user_targettid);
		actor mo;
		int hp, count;
		while((mo=it.Next ()))
		{
			if(user_livingthingsonly)
			{
				if(mo.health>0 && (mo.bShootable || mo.bVulnerable))
				{
					hp+=mo.health;
					count++;
				}
			}
			else if(mo.health>0) //check for health anyway, lol
			count++;
		}
		if(user_livingthingsonly)
		{
			if(hp>maxhp) maxhp=hp;
			health=hp;
		}
		if(count>maxcount) maxcount=count;
		return count;
	}
	Override Void Activate(Actor Activator)
	{
		if(bKilled) Return;
		//a_log("waiter: \cvReactivado");
		if(tid==64) a_log("desdurmiendo");
		bDormant=False;
		maxhp=0;
		maxcount=0;
		special1=0;
		special2=0;
	}
	Override Void Tick()
	{
		Super.Tick();
		//if(tid==64) a_log("bdormant="..bDormant);
		if(bDormant) Return;
		if(special2)
		{
			special2--;
			if(!special2)
			TriggerSpecial(Self);
			Return;
		}
		if(!special1) special1=abs(user_waittics)+1;
		
		special1--;
		if(special1<1)
		{
			int count=CountThings();
			int percent=100*health/(maxhp? maxhp:1);
			int countpercent=100*count/(maxcount? maxcount:1);
			//a_log("waiter: yo esperando="..count.. " percent="..percent.." countpercento="..countpercent);
			if(count<1 || user_percenttrigger && (countpercent<=user_percenttrigger && !user_percent_usehealth || user_percent_usehealth && percent<=user_percenttrigger))
			{
				//A_Log("waiter: \ciConteo triggereado");
				special2=user_delay+1;
			}
		}
	}
	Void TriggerSpecial(Actor Activator)
	{
		if(!Activator) Activator=Self;
		Activator.A_CallSpecial(self.special,Args[0],Args[1],Args[2],Args[3],Args[4]);
		bKilled=user_activateonce;
		//A_Log("waiter: \cnEJECUTADO");
		bDormant=True;
	}
}